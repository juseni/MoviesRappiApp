// Generated by Dagger (https://google.github.io/dagger).
package com.juan.nino.moviesrappiapp.di;

import android.content.Context;
import com.juan.nino.data.platform.NetworkHandler;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class NetworkModule_ProvideNetworkHandlerFactory implements Factory<NetworkHandler> {
  private final NetworkModule module;

  private final Provider<Context> contextProvider;

  public NetworkModule_ProvideNetworkHandlerFactory(
      NetworkModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public NetworkHandler get() {
    return provideInstance(module, contextProvider);
  }

  public static NetworkHandler provideInstance(
      NetworkModule module, Provider<Context> contextProvider) {
    return proxyProvideNetworkHandler(module, contextProvider.get());
  }

  public static NetworkModule_ProvideNetworkHandlerFactory create(
      NetworkModule module, Provider<Context> contextProvider) {
    return new NetworkModule_ProvideNetworkHandlerFactory(module, contextProvider);
  }

  public static NetworkHandler proxyProvideNetworkHandler(NetworkModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.provideNetworkHandler(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
