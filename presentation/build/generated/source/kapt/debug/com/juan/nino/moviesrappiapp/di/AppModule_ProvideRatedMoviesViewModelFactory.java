// Generated by Dagger (https://google.github.io/dagger).
package com.juan.nino.moviesrappiapp.di;

import androidx.lifecycle.ViewModel;
import com.juan.nino.domain.interactor.usecases.RatedMoviesUseCase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideRatedMoviesViewModelFactory implements Factory<ViewModel> {
  private final AppModule module;

  private final Provider<RatedMoviesUseCase> ratedMoviesUseCaseProvider;

  public AppModule_ProvideRatedMoviesViewModelFactory(
      AppModule module, Provider<RatedMoviesUseCase> ratedMoviesUseCaseProvider) {
    this.module = module;
    this.ratedMoviesUseCaseProvider = ratedMoviesUseCaseProvider;
  }

  @Override
  public ViewModel get() {
    return provideInstance(module, ratedMoviesUseCaseProvider);
  }

  public static ViewModel provideInstance(
      AppModule module, Provider<RatedMoviesUseCase> ratedMoviesUseCaseProvider) {
    return proxyProvideRatedMoviesViewModel(module, ratedMoviesUseCaseProvider.get());
  }

  public static AppModule_ProvideRatedMoviesViewModelFactory create(
      AppModule module, Provider<RatedMoviesUseCase> ratedMoviesUseCaseProvider) {
    return new AppModule_ProvideRatedMoviesViewModelFactory(module, ratedMoviesUseCaseProvider);
  }

  public static ViewModel proxyProvideRatedMoviesViewModel(
      AppModule instance, RatedMoviesUseCase ratedMoviesUseCase) {
    return Preconditions.checkNotNull(
        instance.provideRatedMoviesViewModel(ratedMoviesUseCase),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
