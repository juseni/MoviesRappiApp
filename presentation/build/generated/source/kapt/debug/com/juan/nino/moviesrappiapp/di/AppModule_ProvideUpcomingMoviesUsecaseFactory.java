// Generated by Dagger (https://google.github.io/dagger).
package com.juan.nino.moviesrappiapp.di;

import com.juan.nino.data.respositories.UpcomingMoviesRepositoryImpl;
import com.juan.nino.domain.executor.PostExecutionThread;
import com.juan.nino.domain.executor.ThreadExecutor;
import com.juan.nino.domain.interactor.usecases.UpcomingMoviesUseCase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideUpcomingMoviesUsecaseFactory
    implements Factory<UpcomingMoviesUseCase> {
  private final AppModule module;

  private final Provider<UpcomingMoviesRepositoryImpl> upcomingMoviesRepositoryImplProvider;

  private final Provider<ThreadExecutor> threadExecutorProvider;

  private final Provider<PostExecutionThread> postExecutionThreadProvider;

  public AppModule_ProvideUpcomingMoviesUsecaseFactory(
      AppModule module,
      Provider<UpcomingMoviesRepositoryImpl> upcomingMoviesRepositoryImplProvider,
      Provider<ThreadExecutor> threadExecutorProvider,
      Provider<PostExecutionThread> postExecutionThreadProvider) {
    this.module = module;
    this.upcomingMoviesRepositoryImplProvider = upcomingMoviesRepositoryImplProvider;
    this.threadExecutorProvider = threadExecutorProvider;
    this.postExecutionThreadProvider = postExecutionThreadProvider;
  }

  @Override
  public UpcomingMoviesUseCase get() {
    return provideInstance(
        module,
        upcomingMoviesRepositoryImplProvider,
        threadExecutorProvider,
        postExecutionThreadProvider);
  }

  public static UpcomingMoviesUseCase provideInstance(
      AppModule module,
      Provider<UpcomingMoviesRepositoryImpl> upcomingMoviesRepositoryImplProvider,
      Provider<ThreadExecutor> threadExecutorProvider,
      Provider<PostExecutionThread> postExecutionThreadProvider) {
    return proxyProvideUpcomingMoviesUsecase(
        module,
        upcomingMoviesRepositoryImplProvider.get(),
        threadExecutorProvider.get(),
        postExecutionThreadProvider.get());
  }

  public static AppModule_ProvideUpcomingMoviesUsecaseFactory create(
      AppModule module,
      Provider<UpcomingMoviesRepositoryImpl> upcomingMoviesRepositoryImplProvider,
      Provider<ThreadExecutor> threadExecutorProvider,
      Provider<PostExecutionThread> postExecutionThreadProvider) {
    return new AppModule_ProvideUpcomingMoviesUsecaseFactory(
        module,
        upcomingMoviesRepositoryImplProvider,
        threadExecutorProvider,
        postExecutionThreadProvider);
  }

  public static UpcomingMoviesUseCase proxyProvideUpcomingMoviesUsecase(
      AppModule instance,
      UpcomingMoviesRepositoryImpl upcomingMoviesRepositoryImpl,
      ThreadExecutor threadExecutor,
      PostExecutionThread postExecutionThread) {
    return Preconditions.checkNotNull(
        instance.provideUpcomingMoviesUsecase(
            upcomingMoviesRepositoryImpl, threadExecutor, postExecutionThread),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
