// Generated by Dagger (https://google.github.io/dagger).
package com.juan.nino.moviesrappiapp.di;

import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

public final class AppModule_ProvideViewModelFactoryFactory
    implements Factory<ViewModelProvider.Factory> {
  private final AppModule module;

  private final Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> providersProvider;

  public AppModule_ProvideViewModelFactoryFactory(
      AppModule module,
      Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> providersProvider) {
    this.module = module;
    this.providersProvider = providersProvider;
  }

  @Override
  public ViewModelProvider.Factory get() {
    return provideInstance(module, providersProvider);
  }

  public static ViewModelProvider.Factory provideInstance(
      AppModule module,
      Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> providersProvider) {
    return proxyProvideViewModelFactory(module, providersProvider.get());
  }

  public static AppModule_ProvideViewModelFactoryFactory create(
      AppModule module,
      Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> providersProvider) {
    return new AppModule_ProvideViewModelFactoryFactory(module, providersProvider);
  }

  public static ViewModelProvider.Factory proxyProvideViewModelFactory(
      AppModule instance, Map<Class<? extends ViewModel>, Provider<ViewModel>> providers) {
    return Preconditions.checkNotNull(
        instance.provideViewModelFactory(providers),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
