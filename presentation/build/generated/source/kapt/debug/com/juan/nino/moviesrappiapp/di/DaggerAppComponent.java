// Generated by Dagger (https://google.github.io/dagger).
package com.juan.nino.moviesrappiapp.di;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import com.google.gson.Gson;
import com.juan.nino.data.db.dao.PopularMoviesDao;
import com.juan.nino.data.db.dao.RatedMoviesDao;
import com.juan.nino.data.db.dao.UpcomingMoviesDao;
import com.juan.nino.data.platform.NetworkHandler;
import com.juan.nino.data.respositories.RatedMoviesRepositoryImpl;
import com.juan.nino.data.respositories.UpcomingMoviesRepositoryImpl;
import com.juan.nino.data.source.respositories.PopularMoviesRepositoryImpl;
import com.juan.nino.data.source.source.MoviesApi;
import com.juan.nino.domain.interactor.usecases.PopularMoviesUseCase;
import com.juan.nino.domain.interactor.usecases.RatedMoviesUseCase;
import com.juan.nino.domain.interactor.usecases.UpcomingMoviesUseCase;
import com.juan.nino.moviesrappiapp.executor.JobExecutor;
import com.juan.nino.moviesrappiapp.executor.JobExecutor_Factory;
import com.juan.nino.moviesrappiapp.executor.UIThread;
import com.juan.nino.moviesrappiapp.executor.UIThread_Factory;
import com.juan.nino.moviesrappiapp.ui.view.fragment.popular.PopularMoviesFragment;
import com.juan.nino.moviesrappiapp.ui.view.fragment.popular.PopularMoviesFragment_MembersInjector;
import com.juan.nino.moviesrappiapp.ui.view.fragment.topRated.TopRatedMoviesFragment;
import com.juan.nino.moviesrappiapp.ui.view.fragment.topRated.TopRatedMoviesFragment_MembersInjector;
import com.juan.nino.moviesrappiapp.ui.view.fragment.upcoming.UpcomingMoviesFragment;
import com.juan.nino.moviesrappiapp.ui.view.fragment.upcoming.UpcomingMoviesFragment_MembersInjector;
import com.juan.nino.moviesrappiapp.ui.view.search.SearchMovieActivity;
import com.juan.nino.moviesrappiapp.ui.view.search.SearchMovieActivity_MembersInjector;
import com.juan.nino.moviesrappiapp.view_model.PopularMoviesViewModel;
import com.juan.nino.moviesrappiapp.view_model.RatedMoviesViewModel;
import com.juan.nino.moviesrappiapp.view_model.UpcomingMoviesViewModel;
import dagger.internal.DoubleCheck;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<Gson> provideGsonProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<MoviesApi> provideMoviesApiProvider;

  private Provider<Context> provideContextProvider;

  private Provider<PopularMoviesDao> providePopularMoviesDataSourceProvider;

  private Provider<NetworkHandler> provideNetworkHandlerProvider;

  private Provider<PopularMoviesRepositoryImpl> providePopularMoviesRepositoryProvider;

  private Provider<JobExecutor> jobExecutorProvider;

  private Provider<UIThread> uIThreadProvider;

  private Provider<PopularMoviesUseCase> providePopularMoviesUsecaseProvider;

  private AppModule_ProvidePopularMoviesViewModelFactory providePopularMoviesViewModelProvider;

  private Provider<RatedMoviesDao> provideRatedMoviesDataSourceProvider;

  private Provider<RatedMoviesRepositoryImpl> provideRatedMoviesRepositoryProvider;

  private Provider<RatedMoviesUseCase> provideRatedMoviesUsecaseProvider;

  private AppModule_ProvideRatedMoviesViewModelFactory provideRatedMoviesViewModelProvider;

  private Provider<UpcomingMoviesDao> provideUpcomingMoviesDataSourceProvider;

  private Provider<UpcomingMoviesRepositoryImpl> provideUpcomingMoviesRepositoryProvider;

  private Provider<UpcomingMoviesUseCase> provideUpcomingMoviesUsecaseProvider;

  private AppModule_ProvideUpcomingMoviesViewModelFactory provideUpcomingMoviesViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelProvider.Factory> provideViewModelFactoryProvider;

  private DaggerAppComponent(Builder builder) {

    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideGsonProvider =
        DoubleCheck.provider(AppModule_ProvideGsonFactory.create(builder.appModule));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideRetrofitFactory.create(
                builder.networkModule, provideGsonProvider));
    this.provideMoviesApiProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideMoviesApiFactory.create(
                builder.networkModule, provideRetrofitProvider));
    this.provideContextProvider =
        DoubleCheck.provider(AppModule_ProvideContextFactory.create(builder.appModule));
    this.providePopularMoviesDataSourceProvider =
        DoubleCheck.provider(
            AppModule_ProvidePopularMoviesDataSourceFactory.create(
                builder.appModule, provideContextProvider));
    this.provideNetworkHandlerProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideNetworkHandlerFactory.create(
                builder.networkModule, provideContextProvider));
    this.providePopularMoviesRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvidePopularMoviesRepositoryFactory.create(
                builder.appModule,
                provideGsonProvider,
                provideMoviesApiProvider,
                providePopularMoviesDataSourceProvider,
                provideNetworkHandlerProvider));
    this.jobExecutorProvider = DoubleCheck.provider(JobExecutor_Factory.create());
    this.uIThreadProvider = DoubleCheck.provider(UIThread_Factory.create());
    this.providePopularMoviesUsecaseProvider =
        DoubleCheck.provider(
            AppModule_ProvidePopularMoviesUsecaseFactory.create(
                builder.appModule,
                providePopularMoviesRepositoryProvider,
                (Provider) jobExecutorProvider,
                (Provider) uIThreadProvider));
    this.providePopularMoviesViewModelProvider =
        AppModule_ProvidePopularMoviesViewModelFactory.create(
            builder.appModule, providePopularMoviesUsecaseProvider);
    this.provideRatedMoviesDataSourceProvider =
        DoubleCheck.provider(
            AppModule_ProvideRatedMoviesDataSourceFactory.create(
                builder.appModule, provideContextProvider));
    this.provideRatedMoviesRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideRatedMoviesRepositoryFactory.create(
                builder.appModule,
                provideGsonProvider,
                provideMoviesApiProvider,
                provideRatedMoviesDataSourceProvider,
                provideNetworkHandlerProvider));
    this.provideRatedMoviesUsecaseProvider =
        DoubleCheck.provider(
            AppModule_ProvideRatedMoviesUsecaseFactory.create(
                builder.appModule,
                provideRatedMoviesRepositoryProvider,
                (Provider) jobExecutorProvider,
                (Provider) uIThreadProvider));
    this.provideRatedMoviesViewModelProvider =
        AppModule_ProvideRatedMoviesViewModelFactory.create(
            builder.appModule, provideRatedMoviesUsecaseProvider);
    this.provideUpcomingMoviesDataSourceProvider =
        DoubleCheck.provider(
            AppModule_ProvideUpcomingMoviesDataSourceFactory.create(
                builder.appModule, provideContextProvider));
    this.provideUpcomingMoviesRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideUpcomingMoviesRepositoryFactory.create(
                builder.appModule,
                provideGsonProvider,
                provideMoviesApiProvider,
                provideUpcomingMoviesDataSourceProvider,
                provideNetworkHandlerProvider));
    this.provideUpcomingMoviesUsecaseProvider =
        DoubleCheck.provider(
            AppModule_ProvideUpcomingMoviesUsecaseFactory.create(
                builder.appModule,
                provideUpcomingMoviesRepositoryProvider,
                (Provider) jobExecutorProvider,
                (Provider) uIThreadProvider));
    this.provideUpcomingMoviesViewModelProvider =
        AppModule_ProvideUpcomingMoviesViewModelFactory.create(
            builder.appModule, provideUpcomingMoviesUsecaseProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(3)
            .put(PopularMoviesViewModel.class, providePopularMoviesViewModelProvider)
            .put(RatedMoviesViewModel.class, provideRatedMoviesViewModelProvider)
            .put(UpcomingMoviesViewModel.class, provideUpcomingMoviesViewModelProvider)
            .build();
    this.provideViewModelFactoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideViewModelFactoryFactory.create(
                builder.appModule, mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(PopularMoviesFragment popularMoviesFragment) {
    injectPopularMoviesFragment(popularMoviesFragment);
  }

  @Override
  public void inject(TopRatedMoviesFragment topRatedMoviesFragment) {
    injectTopRatedMoviesFragment(topRatedMoviesFragment);
  }

  @Override
  public void inject(UpcomingMoviesFragment upcomingMoviesFragment) {
    injectUpcomingMoviesFragment(upcomingMoviesFragment);
  }

  @Override
  public void inject(SearchMovieActivity searchMovieActivity) {
    injectSearchMovieActivity(searchMovieActivity);
  }

  private PopularMoviesFragment injectPopularMoviesFragment(PopularMoviesFragment instance) {
    PopularMoviesFragment_MembersInjector.injectVmFactory(
        instance, provideViewModelFactoryProvider.get());
    return instance;
  }

  private TopRatedMoviesFragment injectTopRatedMoviesFragment(TopRatedMoviesFragment instance) {
    TopRatedMoviesFragment_MembersInjector.injectVmFactory(
        instance, provideViewModelFactoryProvider.get());
    return instance;
  }

  private UpcomingMoviesFragment injectUpcomingMoviesFragment(UpcomingMoviesFragment instance) {
    UpcomingMoviesFragment_MembersInjector.injectVmFactory(
        instance, provideViewModelFactoryProvider.get());
    return instance;
  }

  private SearchMovieActivity injectSearchMovieActivity(SearchMovieActivity instance) {
    SearchMovieActivity_MembersInjector.injectVmFactory(
        instance, provideViewModelFactoryProvider.get());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private NetworkModule networkModule;

    private Builder() {}

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }
  }
}
